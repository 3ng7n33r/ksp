// Generated by CoffeeScript 1.3.3
(function() {
  var HEIGHT, WIDTH;

  importScripts('numeric-1.2.6.min.js');

  importScripts('quaternion.js');

  importScripts('orbit.js');

  WIDTH = 720;

  HEIGHT = 720;

  this.onmessage = function(event) {
    var arrivalTime, deltaV, deltaVs, departureOrbit, departurePositions, departureTime, departureVelocities, destinationOrbit, dt, earliestArrival, earliestDeparture, i, lastProgress, longDeltaV, longWayTransferVelocities, maxDeltaV, minDeltaV, now, nu, p1, p2, referenceBody, shortDeltaV, shortWayTransferVelocities, v1, v2, x, xResolution, y, yResolution, _i, _j, _k;
    departureOrbit = new Orbit(event.data.departureOrbit);
    destinationOrbit = new Orbit(event.data.destinationOrbit);
    earliestDeparture = event.data.earliestDeparture;
    earliestArrival = event.data.earliestArrival;
    xResolution = event.data.xScale / WIDTH;
    yResolution = event.data.yScale / HEIGHT;
    referenceBody = departureOrbit.referenceBody;
    departurePositions = [];
    departureVelocities = [];
    for (x = _i = 0; 0 <= WIDTH ? _i < WIDTH : _i > WIDTH; x = 0 <= WIDTH ? ++_i : --_i) {
      departureTime = earliestDeparture + x * xResolution;
      nu = departureOrbit.trueAnomalyAt(departureTime);
      departurePositions[x] = departureOrbit.positionAtTrueAnomaly(nu);
      departureVelocities[x] = departureOrbit.velocityAtTrueAnomaly(nu);
    }
    deltaVs = new Float64Array(WIDTH * HEIGHT);
    i = 0;
    minDeltaV = Infinity;
    maxDeltaV = 0;
    lastProgress = 0;
    for (y = _j = 0; 0 <= HEIGHT ? _j < HEIGHT : _j > HEIGHT; y = 0 <= HEIGHT ? ++_j : --_j) {
      arrivalTime = earliestArrival + ((HEIGHT - 1) - y) * yResolution;
      nu = destinationOrbit.trueAnomalyAt(arrivalTime);
      p2 = destinationOrbit.positionAtTrueAnomaly(nu);
      v2 = destinationOrbit.velocityAtTrueAnomaly(nu);
      for (x = _k = 0; 0 <= WIDTH ? _k < WIDTH : _k > WIDTH; x = 0 <= WIDTH ? ++_k : --_k) {
        departureTime = earliestDeparture + x * xResolution;
        if (arrivalTime <= departureTime) {
          deltaVs[i++] = Infinity;
          continue;
        }
        p1 = departurePositions[x];
        v1 = departureVelocities[x];
        dt = arrivalTime - departureTime;
        shortWayTransferVelocities = Orbit.transferVelocities(referenceBody, p1, p2, dt, false);
        longWayTransferVelocities = Orbit.transferVelocities(referenceBody, p1, p2, dt, true);
        shortDeltaV = numeric.norm2(numeric.subVV(v1, shortWayTransferVelocities[0])) + numeric.norm2(numeric.subVV(v2, shortWayTransferVelocities[1]));
        longDeltaV = numeric.norm2(numeric.subVV(v1, longWayTransferVelocities[0])) + numeric.norm2(numeric.subVV(v2, longWayTransferVelocities[1]));
        deltaVs[i++] = deltaV = Math.min(shortDeltaV, longDeltaV);
        minDeltaV = Math.min(deltaV, minDeltaV);
        maxDeltaV = Math.max(deltaV, maxDeltaV);
      }
      now = Date.now();
      if (now - lastProgress > 100) {
        postMessage({
          progress: (y + 1) / HEIGHT
        });
        lastProgress = now;
      }
    }
    return postMessage({
      deltaVs: deltaVs.buffer,
      minDeltaV: minDeltaV,
      maxDeltaV: maxDeltaV
    }, [deltaVs.buffer]);
  };

}).call(this);
