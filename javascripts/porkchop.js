// Generated by CoffeeScript 1.6.2
(function() {
  var angleString, dateFromString, dateSeconds, daysPerYear, deltaVAbbr, distanceString, durationSeconds, durationString, hms, hmsString, hoursPerDay, kerbalDate, kerbalDateString, numberWithCommas, porkchopPlot, prepareOrigins, secondsPerDay, selectedTransfer, shortKerbalDateString, showTransferDetails, showTransferDetailsForPoint, sign, updateAdvancedControls, ydhms;

  porkchopPlot = null;

  selectedTransfer = null;

  hoursPerDay = 6;

  daysPerYear = 426;

  sign = function(x) {
    if (x < 0) {
      return -1;
    } else {
      return 1;
    }
  };

  numberWithCommas = function(n) {
    return n.toString().replace(/\B(?=(?=\d*\.)(\d{3})+(?!\d))/g, ',');
  };

  secondsPerDay = function() {
    return hoursPerDay * 3600;
  };

  hms = function(t) {
    var hours, mins, secs;

    hours = (t / 3600) | 0;
    t %= 3600;
    mins = (t / 60) | 0;
    secs = t % 60;
    return [hours, mins, secs];
  };

  ydhms = function(t) {
    var days, hours, mins, secs, years, _ref;

    _ref = hms(+t), hours = _ref[0], mins = _ref[1], secs = _ref[2];
    days = (hours / hoursPerDay) | 0;
    hours = hours % hoursPerDay;
    years = (days / daysPerYear) | 0;
    days = days % daysPerYear;
    return [years, days, hours, mins, secs];
  };

  kerbalDate = function(t) {
    var days, hours, mins, secs, years, _ref;

    _ref = ydhms(+t), years = _ref[0], days = _ref[1], hours = _ref[2], mins = _ref[3], secs = _ref[4];
    return [years + 1, days + 1, hours, mins, secs];
  };

  durationSeconds = function(years, days, hours, mins, secs) {
    if (years == null) {
      years = 0;
    }
    if (days == null) {
      days = 0;
    }
    if (hours == null) {
      hours = 0;
    }
    if (mins == null) {
      mins = 0;
    }
    if (secs == null) {
      secs = 0;
    }
    return ((((+years * daysPerYear) + +days) * hoursPerDay + +hours) * 60 + +mins) * 60 + +secs;
  };

  dateSeconds = function(year, day, hour, min, sec) {
    if (year == null) {
      year = 0;
    }
    if (day == null) {
      day = 0;
    }
    if (hour == null) {
      hour = 0;
    }
    if (min == null) {
      min = 0;
    }
    if (sec == null) {
      sec = 0;
    }
    return durationSeconds(+year - 1, +day - 1, +hour, +min, +sec);
  };

  hmsString = function(hour, min, sec) {
    if (min < 10) {
      min = "0" + min;
    }
    if (sec < 10) {
      sec = "0" + sec;
    }
    return "" + hour + ":" + min + ":" + sec;
  };

  kerbalDateString = function(t) {
    var day, hour, min, sec, year, _ref;

    _ref = kerbalDate(+t.toFixed()), year = _ref[0], day = _ref[1], hour = _ref[2], min = _ref[3], sec = _ref[4];
    return "Year " + year + ", day " + day + " at " + (hmsString(hour, min, sec));
  };

  shortKerbalDateString = function(t) {
    var day, hour, min, sec, year, _ref;

    _ref = kerbalDate(+t.toFixed()), year = _ref[0], day = _ref[1], hour = _ref[2], min = _ref[3], sec = _ref[4];
    return "" + year + "/" + day + " " + (hmsString(hour, min, sec));
  };

  dateFromString = function(dateString) {
    var components;

    components = dateString.match(/(\d+)\/(\d+)\s+(\d+):(\d+):(\d+)/);
    components.shift();
    return dateSeconds.apply(null, components);
  };

  durationString = function(t) {
    var days, hours, mins, result, secs, years, _ref;

    _ref = ydhms(t.toFixed()), years = _ref[0], days = _ref[1], hours = _ref[2], mins = _ref[3], secs = _ref[4];
    result = "";
    if (years > 0) {
      result += years + " years ";
    }
    if (years > 0 || days > 0) {
      result += days + " days ";
    }
    return result + hmsString(hours, mins, secs);
  };

  distanceString = function(d) {
    if (Math.abs(d) > 1e12) {
      return numberWithCommas((d / 1e9).toFixed()) + " Gm";
    } else if (Math.abs(d) >= 1e9) {
      return numberWithCommas((d / 1e6).toFixed()) + " Mm";
    } else if (Math.abs(d) >= 1e6) {
      return numberWithCommas((d / 1e3).toFixed()) + " km";
    } else {
      return numberWithCommas(d.toFixed()) + " m";
    }
  };

  deltaVAbbr = function(el, dv, prograde, normal, radial) {
    var tooltip;

    tooltip = numberWithCommas(prograde.toFixed(1)) + " m/s prograde; " + numberWithCommas(normal.toFixed(1)) + " m/s normal";
    if (radial != null) {
      tooltip += "; " + numberWithCommas(radial.toFixed(1)) + " m/s radial";
    }
    return el.attr({
      title: tooltip
    }).text(numberWithCommas(dv.toFixed()) + " m/s");
  };

  angleString = function(angle, precision) {
    if (precision == null) {
      precision = 0;
    }
    return (angle * 180 / Math.PI).toFixed(precision) + String.fromCharCode(0x00b0);
  };

  showTransferDetailsForPoint = function(point) {
    var dt, mission, t0, transfer, x, y, _ref;

    mission = porkchopPlot.mission;
    _ref = [point.x, point.y], x = _ref[0], y = _ref[1];
    t0 = mission.earliestDeparture + x * mission.xResolution;
    dt = mission.shortestTimeOfFlight + y * mission.yResolution;
    transfer = Orbit.transfer(mission.transferType, mission.originBody, mission.destinationBody, t0, dt, mission.initialOrbitalVelocity, mission.finalOrbitalVelocity);
    return showTransferDetails(transfer, t0, dt);
  };

  showTransferDetails = function(transfer, t0, dt) {
    var destinationOrbit, ejectionAngle, mission, originOrbit, t1;

    mission = porkchopPlot.mission;
    t1 = t0 + dt;
    transfer = Orbit.transferDetails(transfer, mission.originBody, t0, mission.initialOrbitalVelocity);
    selectedTransfer = transfer;
    originOrbit = mission.originBody.orbit;
    destinationOrbit = mission.destinationBody.orbit;
    $('#departureTime').text(kerbalDateString(t0)).attr({
      title: "UT: " + (t0.toFixed()) + "s"
    });
    $('#arrivalTime').text(kerbalDateString(t1)).attr({
      title: "UT: " + (t1.toFixed()) + "s"
    });
    $('#timeOfFlight').text(durationString(dt)).attr({
      title: dt.toFixed() + "s"
    });
    $('#phaseAngle').text(angleString(originOrbit.phaseAngle(destinationOrbit, t0), 2));
    if (transfer.ejectionAngle != null) {
      $('.ejectionAngle').show();
      if (destinationOrbit.semiMajorAxis < originOrbit.semiMajorAxis) {
        ejectionAngle = transfer.ejectionAngle - Math.PI;
        if (ejectionAngle < 0) {
          ejectionAngle += 2 * Math.PI;
        }
        $('#ejectionAngle').text(angleString(ejectionAngle) + " to retrograde");
      } else {
        $('#ejectionAngle').text(angleString(transfer.ejectionAngle) + " to prograde");
      }
    } else {
      $('.ejectionAngle').hide();
    }
    $('#ejectionDeltaV').text(numberWithCommas(transfer.ejectionDeltaV.toFixed()) + " m/s");
    $('#ejectionDeltaVInfo').popover('hide');
    $('#transferPeriapsis').text(distanceString(transfer.orbit.periapsisAltitude()));
    $('#transferApoapsis').text(distanceString(transfer.orbit.apoapsisAltitude()));
    $('#transferInclination').text(angleString(transfer.orbit.inclination, 2));
    $('#transferAngle').text(angleString(transfer.angle));
    if (transfer.planeChangeTime != null) {
      $('.ballisticTransfer').hide();
      $('.planeChangeTransfer').show();
      $('#planeChangeTime').text(kerbalDateString(transfer.planeChangeTime)).attr({
        title: "UT: " + (transfer.planeChangeTime.toFixed()) + "s"
      });
      $('#planeChangeAngleToIntercept').text(angleString(transfer.planeChangeAngleToIntercept, 2));
      $('#planeChangeAngle').text(angleString(transfer.planeChangeAngle, 2));
      deltaVAbbr($('#planeChangeDeltaV'), transfer.planeChangeDeltaV, -transfer.planeChangeDeltaV * Math.abs(Math.sin(transfer.planeChangeAngle / 2)), transfer.planeChangeDeltaV * sign(transfer.planeChangeAngle) * Math.cos(transfer.planeChangeAngle / 2));
    } else {
      $('.planeChangeTransfer').hide();
      $('.ballisticTransfer').show();
      $('#ejectionInclination').text(angleString(transfer.ejectionInclination, 2));
    }
    if (transfer.insertionInclination != null) {
      $('#insertionInclination').text(angleString(transfer.insertionInclination, 2));
    } else {
      $('#insertionInclination').text("N/A");
    }
    if (transfer.insertionDeltaV !== 0) {
      $('#insertionDeltaV').text(numberWithCommas(transfer.insertionDeltaV.toFixed()) + " m/s");
    } else {
      $('#insertionDeltaV').text("N/A");
    }
    $('#totalDeltaV').text(numberWithCommas(transfer.deltaV.toFixed()) + " m/s");
    return $('#transferDetails:hidden').fadeIn();
  };

  updateAdvancedControls = function() {
    var departureRange, destination, hohmannTransfer, hohmannTransferTime, maxDays, maxDeparture, minDays, minDeparture, origin, referenceBody, synodicPeriod;

    origin = CelestialBody[$('#originSelect').val()];
    destination = CelestialBody[$('#destinationSelect').val()];
    referenceBody = origin.orbit.referenceBody;
    hohmannTransfer = Orbit.fromApoapsisAndPeriapsis(referenceBody, destination.orbit.semiMajorAxis, origin.orbit.semiMajorAxis, 0, 0, 0, 0);
    hohmannTransferTime = hohmannTransfer.period() / 2;
    synodicPeriod = Math.abs(1 / (1 / destination.orbit.period() - 1 / origin.orbit.period()));
    departureRange = Math.min(2 * synodicPeriod, 2 * origin.orbit.period()) / secondsPerDay();
    if (departureRange < 0.1) {
      departureRange = +departureRange.toFixed(2);
    } else if (departureRange < 1) {
      departureRange = +departureRange.toFixed(1);
    } else {
      departureRange = +departureRange.toFixed();
    }
    minDeparture = dateSeconds($('#earliestDepartureYear').val(), $('#earliestDepartureDay').val()) / secondsPerDay();
    maxDeparture = minDeparture + departureRange;
    minDays = Math.max(hohmannTransferTime - destination.orbit.period(), hohmannTransferTime / 2) / secondsPerDay();
    maxDays = minDays + Math.min(2 * destination.orbit.period(), hohmannTransferTime) / secondsPerDay();
    minDays = minDays < 10 ? minDays.toFixed(2) : minDays.toFixed();
    maxDays = maxDays < 10 ? maxDays.toFixed(2) : maxDays.toFixed();
    $('#latestDepartureYear').val((maxDeparture / daysPerYear | 0) + 1);
    $('#latestDepartureDay').val((maxDeparture % daysPerYear) + 1);
    $('#shortestTimeOfFlight').val(minDays);
    $('#longestTimeOfFlight').val(maxDays);
    if (destination.mass != null) {
      return $('#finalOrbit').attr("disabled", $('#noInsertionBurnCheckbox').is(":checked"));
    }
  };

  window.prepareOrigins = prepareOrigins = function() {
    var addPlanetGroup, bodies, body, listBody, name, originGroup, originSelect, referenceBodyGroup, referenceBodySelect, _i, _len;

    originSelect = $('#originSelect');
    referenceBodySelect = $('#referenceBodySelect');
    originSelect.empty();
    referenceBodySelect.empty();
    $('<option>').text('Kerbol').appendTo(referenceBodySelect);
    listBody = function(referenceBody, originGroup, referenceBodyGroup) {
      var body, children, name, _i, _len, _results;

      children = Object.keys(referenceBody.children());
      children.sort(function(a, b) {
        return CelestialBody[a].orbit.semiMajorAxis - CelestialBody[b].orbit.semiMajorAxis;
      });
      _results = [];
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        name = children[_i];
        body = CelestialBody[name];
        originGroup.append($('<option>').text(name));
        if (body.mass != null) {
          referenceBodyGroup.append($('<option>').text(name));
          _results.push(listBody(body, originGroup, referenceBodyGroup));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    addPlanetGroup = function(planet, group, selectBox, minChildren) {
      if (group.children().size() >= minChildren) {
        return group.attr('label', planet + ' System').prepend($('<option>').text(planet)).appendTo(selectBox);
      } else {
        return $('<option>').text(planet).appendTo(selectBox);
      }
    };
    bodies = Object.keys(CelestialBody.Kerbol.children());
    bodies.sort(function(a, b) {
      return CelestialBody[a].orbit.semiMajorAxis - CelestialBody[b].orbit.semiMajorAxis;
    });
    for (_i = 0, _len = bodies.length; _i < _len; _i++) {
      name = bodies[_i];
      body = CelestialBody[name];
      if (body.mass == null) {
        $('<option>').text(name).appendTo(originSelect);
      } else {
        originGroup = $('<optgroup>');
        referenceBodyGroup = $('<optgroup>');
        listBody(body, originGroup, referenceBodyGroup);
        addPlanetGroup(name, originGroup, originSelect, 2);
        addPlanetGroup(name, referenceBodyGroup, referenceBodySelect, 1);
      }
    }
    originSelect.val('Kerbin');
    if (originSelect.val() == null) {
      return originSelect.prop('selectedIndex', 0);
    }
  };

  $(document).ready(function() {
    var celestialBodyForm, ejectionDeltaVInfoContent;

    porkchopPlot = new PorkchopPlot($('#porkchopContainer'), secondsPerDay());
    $(porkchopPlot).on('plotComplete', function(event) {
      showTransferDetailsForPoint(porkchopPlot.selectedPoint);
      return $('#porkchopSubmit,#porkchopContainer button,#refineTransferBtn').prop('disabled', false);
    }).on('click', function(event, point) {
      showTransferDetailsForPoint(point);
      return ga('send', 'event', 'porkchop', 'click', "" + point.x + "," + point.y);
    });
    prepareOrigins();
    $('#refineTransferBtn').click(function(event) {
      var dt, mission, t0, transfer, x, y, _ref;

      _ref = [porkchopPlot.selectedPoint.x, porkchopPlot.selectedPoint.y], x = _ref[0], y = _ref[1];
      mission = porkchopPlot.mission;
      t0 = mission.earliestDeparture + x * mission.xResolution;
      dt = mission.shortestTimeOfFlight + y * mission.yResolution;
      transfer = Orbit.refineTransfer(selectedTransfer, mission.transferType, mission.originBody, mission.destinationBody, t0, dt, mission.initialOrbitalVelocity, mission.finalOrbitalVelocity);
      return showTransferDetails(transfer, t0, dt);
    });
    $('.altitude').tooltip({
      container: 'body'
    });
    ejectionDeltaVInfoContent = function() {
      var list;

      list = $("<dl>");
      $("<dt>").text("Prograde \u0394v").appendTo(list);
      $("<dd>").text(numberWithCommas(selectedTransfer.ejectionProgradeDeltaV.toFixed(1)) + " m/s").appendTo(list);
      $("<dt>").text("Normal \u0394v").appendTo(list);
      $("<dd>").text(numberWithCommas(selectedTransfer.ejectionNormalDeltaV.toFixed(1)) + " m/s").appendTo(list);
      if (selectedTransfer.ejectionRadialDeltaV != null) {
        $("<dt>").text("Radial \u0394v").appendTo(list);
        $("<dd>").text(numberWithCommas(selectedTransfer.ejectionRadialDeltaV.toFixed(1)) + " m/s").appendTo(list);
      }
      $("<dd>").html("&nbsp;").appendTo(list);
      if (selectedTransfer.ejectionPitch != null) {
        $("<dt>").text("Pitch").appendTo(list);
        $("<dd>").text(angleString(selectedTransfer.ejectionPitch, 2)).appendTo(list);
      }
      $("<dt>").text("Heading").appendTo(list);
      $("<dd>").text(angleString(selectedTransfer.ejectionHeading, 2)).appendTo(list);
      return list;
    };
    $('#ejectionDeltaVInfo').popover({
      html: true,
      content: ejectionDeltaVInfoContent
    }).click(function(event) {
      return event.preventDefault();
    }).on('show.bs.popover', function() {
      return $(this).next().find('.popover-content').html(ejectionDeltaVInfoContent());
    });
    $('#earthTime').click(function() {
      hoursPerDay = 24;
      daysPerYear = 365;
      porkchopPlot.secondsPerDay = secondsPerDay();
      return updateAdvancedControls();
    });
    $('#kerbinTime').click(function() {
      hoursPerDay = 6;
      daysPerYear = 426;
      porkchopPlot.secondsPerDay = secondsPerDay();
      return updateAdvancedControls();
    });
    $('#originSelect').change(function(event) {
      var bodies, name, origin, previousDestination, referenceBody, s, _i, _len;

      origin = CelestialBody[$(this).val()];
      referenceBody = origin.orbit.referenceBody;
      $('#initialOrbit').attr("disabled", origin.mass == null);
      s = $('#destinationSelect');
      previousDestination = s.val();
      s.empty();
      bodies = Object.keys(referenceBody.children());
      bodies.sort(function(a, b) {
        return CelestialBody[a].orbit.semiMajorAxis - CelestialBody[b].orbit.semiMajorAxis;
      });
      for (_i = 0, _len = bodies.length; _i < _len; _i++) {
        name = bodies[_i];
        if (CelestialBody[name] !== origin) {
          s.append($('<option>').text(name));
        }
      }
      s.val(previousDestination);
      if (s.val() == null) {
        s.prop('selectedIndex', 0);
      }
      s.prop('disabled', s[0].childNodes.length === 0);
      return updateAdvancedControls();
    });
    $('#destinationSelect').change(function(event) {
      $('#finalOrbit').attr("disabled", CelestialBody[$(this).val()].mass == null);
      return updateAdvancedControls();
    });
    $('#originSelect').change();
    $('#destinationSelect').val('Duna');
    $('#destinationSelect').change();
    if ($('#earthTime').prop('checked')) {
      $('#earthTime').click();
    }
    $('#noInsertionBurnCheckbox').change(function(event) {
      if (CelestialBody[$('#destinationSelect').val()].mass != null) {
        return $('#finalOrbit').attr("disabled", $(this).is(":checked"));
      }
    });
    $('#showAdvancedControls').click(function(event) {
      var $this;

      $this = $(this);
      if ($this.text().indexOf('Show') !== -1) {
        $this.text('Hide advanced settings...');
        return $('#advancedControls').slideDown();
      } else {
        $(this).text('Show advanced settings...');
        return $('#advancedControls').slideUp();
      }
    });
    $('#earliestDepartureYear,#earliestDepartureDay').change(function(event) {
      if ($('#showAdvancedControls').text().indexOf('Show') !== -1) {
        return updateAdvancedControls();
      } else {
        if (+$('#earliestDepartureYear').val() > +$('#latestDepartureYear').val()) {
          $('#latestDepartureYear').val($('#earliestDepartureYear').val());
        }
        if (+$('#earliestDepartureYear').val() === +$('#latestDepartureYear').val()) {
          if (+$('#earliestDepartureDay').val() >= +$('#latestDepartureDay').val()) {
            return $('#latestDepartureDay').val(+$('#earliestDepartureDay').val() + 1);
          }
        }
      }
    });
    $('#shortestTimeOfFlight,#longestTimeOfFlight').change(function(event) {
      if (+$('#shortestTimeOfFlight').val() <= 0) {
        $('#shortestTimeOfFlight').val(1);
      }
      if (+$('#longestTimeOfFlight').val() <= 0) {
        $('#longestTimeOfFlight').val(2);
      }
      if (+$('#shortestTimeOfFlight').val() >= $('#longestTimeOfFlight').val()) {
        if (this.id === 'shortestTimeOfFlight') {
          return $('#longestTimeOfFlight').val(+$('#shortestTimeOfFlight').val() + 1);
        } else if (+$('#longestTimeOfFlight').val() > 1) {
          return $('#shortestTimeOfFlight').val(+$('#longestTimeOfFlight').val() - 1);
        } else {
          return $('#shortestTimeOfFlight').val(+$('#longestTimeOfFlight').val() / 2);
        }
      }
    });
    $('#porkchopForm').bind('reset', function(event) {
      return setTimeout(function() {
        $('#originSelect').val('Kerbin');
        $('#originSelect').change();
        $('#destinationSelect').val('Duna');
        return $('#destinationSelect').change();
      }, 0);
    });
    $('#porkchopForm').submit(function(event) {
      var description, destinationBody, destinationBodyName, earliestDeparture, finalOrbit, finalOrbitalVelocity, initialOrbit, initialOrbitalVelocity, latestDeparture, mission, originBody, originBodyName, scrollTop, shortestTimeOfFlight, transferType, xScale, yScale;

      event.preventDefault();
      $('#porkchopSubmit,#porkchopContainer button,#refineTransferBtn').prop('disabled', true);
      scrollTop = $('#porkchopCanvas').offset().top + $('#porkchopCanvas').height() - $(window).height();
      if ($(document).scrollTop() < scrollTop) {
        $("html,body").animate({
          scrollTop: scrollTop
        }, 500);
      }
      originBodyName = $('#originSelect').val();
      destinationBodyName = $('#destinationSelect').val();
      initialOrbit = $('#initialOrbit').val().trim();
      finalOrbit = $('#finalOrbit').val().trim();
      transferType = $('#transferTypeSelect').val();
      originBody = CelestialBody[originBodyName];
      destinationBody = CelestialBody[destinationBodyName];
      if ((originBody.mass == null) || +initialOrbit === 0) {
        initialOrbitalVelocity = 0;
      } else {
        initialOrbitalVelocity = originBody.circularOrbitVelocity(initialOrbit * 1e3);
      }
      if ($('#noInsertionBurnCheckbox').is(":checked")) {
        finalOrbitalVelocity = null;
      } else if ((destinationBody.mass == null) || +finalOrbit === 0) {
        finalOrbitalVelocity = 0;
      } else {
        finalOrbitalVelocity = destinationBody.circularOrbitVelocity(finalOrbit * 1e3);
      }
      earliestDeparture = dateSeconds(+$('#earliestDepartureYear').val(), +$('#earliestDepartureDay').val());
      latestDeparture = dateSeconds(+$('#latestDepartureYear').val(), +$('#latestDepartureDay').val());
      xScale = latestDeparture - earliestDeparture;
      shortestTimeOfFlight = durationSeconds(0, +$('#shortestTimeOfFlight').val());
      yScale = durationSeconds(0, +$('#longestTimeOfFlight').val()) - shortestTimeOfFlight;
      mission = {
        transferType: transferType,
        originBody: originBody,
        destinationBody: destinationBody,
        initialOrbitalVelocity: initialOrbitalVelocity,
        finalOrbitalVelocity: finalOrbitalVelocity,
        earliestDeparture: earliestDeparture,
        shortestTimeOfFlight: shortestTimeOfFlight,
        xScale: xScale,
        yScale: yScale
      };
      porkchopPlot.calculate(mission, true);
      description = "" + originBodyName + " @" + (+initialOrbit) + "km to " + destinationBodyName;
      if (finalOrbit) {
        description += " @" + (+finalOrbit) + "km";
      }
      description += " after day " + (earliestDeparture / secondsPerDay()) + " via " + ($('#transferTypeSelect option:selected').text()) + " transfer";
      return ga('send', 'event', 'porkchop', 'submit', description);
    });
    celestialBodyForm = new CelestialBodyForm($('#bodyForm'));
    $('#originAddBtn').click(function(event) {
      return celestialBodyForm.add();
    });
    $('#originEditBtn').click(function(event) {
      return celestialBodyForm.edit(CelestialBody[$('#originSelect').val()]);
    });
    $('#destinationAddBtn').click(function(event) {
      var referenceBody;

      referenceBody = CelestialBody[$('#originSelect').val()].orbit.referenceBody;
      return celestialBodyForm.add(referenceBody);
    });
    return $('#destinationEditBtn').click(function(event) {
      var body;

      body = CelestialBody[$('#destinationSelect').val()];
      return celestialBodyForm.edit(body, true);
    });
  });

}).call(this);
